/*
 * ConditionForm.java
 *
 * Copyright (C) 2009 Olivier Sechet
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, see <http://www.gnu.org/licenses/>.
 */
package net.druppi.swing.table;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import net.druppi.util.ResourceManager;


/**
 * A ConditionForm is used to define a filtering condition for a table. The condition
 * depends on a column and a filter text.
 *
 * @author Olivier Sechet
 * @version 1.0 - Mar 25, 2009
 */
@SuppressWarnings("serial")
public class ConditionForm extends javax.swing.JPanel {

    /** The modified property name. */
    public static final String MODIFIED_PROPERTY = "modified"; //$NON-NLS-1$

    /** This panel's number. */
    private int number;

    /** The column comboBox model. */
    private ComboBoxModel model;

    /**
     * Creates new form ConditionForm.
     *
     * @param number the panel's number (it will be visible in the border title).
     * @param columnModel the columnModel of the associated table.
     */
    public ConditionForm(final int number, final TableColumnModel columnModel) {
        this.number = number;
        List<String> columnsName = new ArrayList<String>();
        for (Enumeration<TableColumn> e = columnModel.getColumns(); e.hasMoreElements();) {
            columnsName.add(e.nextElement().getHeaderValue().toString());
        }
        this.model = new DefaultComboBoxModel(columnsName.toArray(new String[columnsName.size()]));
        initComponents();
    }

    /**
     * Returns the filter text.
     *
     * @return the filter text.
     */
    public final String getText() {
        return filterTextField.getText();
    }

    /**
     * Returns the index of the selected column.
     *
     * @return the index of the selected column.
     */
    public final int getColumnIndex() {
        return columnComboBox.getSelectedIndex();
    }

    /**
     * Returns <code>true</code> if the case sensitive checkBox is selected.
     *
     * @return <code>true</code> if the case sensitive checkBox is selected.
     */
    public final boolean isCaseSensitive() {
        return caseCheckBox.isSelected();
    }

    /**
     * Updates the modified property.
     *
     * @param modified <code>true</code> if the panel has been modified.
     */
    private void setModified(final boolean modified) {
        firePropertyChange(MODIFIED_PROPERTY, false, modified);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new JLabel();
        columnComboBox = new JComboBox();
        label2 = new JLabel();
        filterTextField = new JTextField();
        caseCheckBox = new JCheckBox();
        regexCheckBox = new JCheckBox();

        setBorder(BorderFactory.createTitledBorder(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.border.title") + number)); // NOI18N
        setName("Form"); // NOI18N

        label1.setText(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.label1.text")); // NOI18N
        label1.setName("label1"); // NOI18N

        columnComboBox.setModel(model);
        columnComboBox.setName("columnComboBox"); // NOI18N
        columnComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                columnComboBoxItemStateChanged(evt);
            }
        });

        label2.setText(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.label2.text")); // NOI18N
        label2.setName("label2"); // NOI18N

        filterTextField.setName("filterTextField"); // NOI18N
        filterTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                setModified(true);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                setModified(true);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                setModified(true);
            }
        });

        caseCheckBox.setMnemonic(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.caseCheckBox.mnemonic").charAt(0));
        caseCheckBox.setText(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.caseCheckBox.text")); // NOI18N
        caseCheckBox.setName("caseCheckBox"); // NOI18N
        caseCheckBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                caseCheckBoxItemStateChanged(evt);
            }
        });

        regexCheckBox.setMnemonic(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.regexCheckBox.mnemonic").charAt(0));
        regexCheckBox.setSelected(true);
        regexCheckBox.setText(ResourceManager.getResourceMap(getClass()).getString("ConditionForm.regexCheckBox.text")); // NOI18N
        regexCheckBox.setEnabled(false);
        regexCheckBox.setName("regexCheckBox"); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(caseCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(regexCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(columnComboBox, 0, 117, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(label2)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(filterTextField, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(label1)
                    .addComponent(columnComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2)
                    .addComponent(filterTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(caseCheckBox)
                    .addComponent(regexCheckBox)))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Update the modified state when the comboBox selection changes.
     *
     * @param evt an event.
     */
    private void columnComboBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_columnComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            setModified(true);
        }
    }//GEN-LAST:event_columnComboBoxItemStateChanged

    /**
     * Update the modified state when the checkBox state changes.
     *
     * @param evt an event.
     */
    private void caseCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_caseCheckBoxItemStateChanged
        setModified(true);
    }//GEN-LAST:event_caseCheckBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** The case sensitive checkBox. */
    private JCheckBox caseCheckBox;
    /** The column comboBox. */
    private JComboBox columnComboBox;
    /** The filter text. */
    private JTextField filterTextField;
    /** The column label. */
    private JLabel label1;
    /** The filter label. */
    private JLabel label2;
    /** The regular expression checkBox. */
    private JCheckBox regexCheckBox;
    // End of variables declaration//GEN-END:variables

}
