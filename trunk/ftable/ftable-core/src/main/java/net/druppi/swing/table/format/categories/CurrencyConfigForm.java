/*
 * CurrencyConfigForm.java
 *
 * Copyright (C) 2009 Olivier Sechet
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.druppi.swing.table.format.categories;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Currency;
import java.util.List;
import java.util.Locale;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import net.druppi.util.ResourceManager;


/**
 * Configuration panel of the CurrencyCategory.
 *
 * @author Olivier Sechet
 * @version 1.0 - Apr 13, 2009
 */
@SuppressWarnings("serial")
class CurrencyConfigForm extends ConfigPanel {

    /** The managed Format. */
    private DecimalFormat format;

    /**
     * Creates new form CurrencyConfigForm.
     */
    public CurrencyConfigForm() {
        initComponents();

        // Build the list of currencies
        List<CurrencyRenderer> renderers = new ArrayList<CurrencyRenderer>();
        renderers.add(new CurrencyRenderer(null));
        Locale[] locales = Locale.getAvailableLocales();
        for (Locale locale : locales) {
            Currency currency = DecimalFormatSymbols.getInstance(locale).getCurrency();
            if (currency.getDefaultFractionDigits() >= 0) {
                renderers.add(new CurrencyRenderer(locale));
            }
        }
        Collections.sort(renderers);
        symbolComboBox.setModel(new DefaultComboBoxModel(renderers.toArray(new CurrencyRenderer[renderers.size()])));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setFormat(final Format format) {
        this.format = (DecimalFormat) format;

        updateView();
    }

    /**
     * Updates the view.
     */
    private void updateView() {
        decimalSpinner.setValue(format.getMinimumFractionDigits());

        // Select the currency
        boolean found = false;
        Currency currency = format.getCurrency();
        ComboBoxModel model = symbolComboBox.getModel();
        int size = model.getSize();
        // The first choice is always "None": the loop can start at 1.
        for (int i = 1; i < size && !found; i++) {
            CurrencyRenderer renderer = (CurrencyRenderer) model.getElementAt(i);
            if (renderer.getCurrency().equals(currency)) {
                symbolComboBox.setSelectedItem(renderer);
                found = true;
            }
        }
        if (!found) {
            symbolComboBox.setSelectedIndex(0);
        }
    }

    /**
     *
     */
    private void updateFormat() {
        CurrencyRenderer renderer = (CurrencyRenderer) symbolComboBox.getSelectedItem();
        Locale locale = renderer.getLocale();
        DecimalFormat newFormat;
        if (locale == null) {
            newFormat = (DecimalFormat) DecimalFormat.getCurrencyInstance();
        } else {
            newFormat = (DecimalFormat) DecimalFormat.getCurrencyInstance(locale);
        }

        // Change the locale
        format.applyLocalizedPattern(newFormat.toLocalizedPattern());
        // Change the symbol
        DecimalFormatSymbols symbols = format.getDecimalFormatSymbols();
        symbols.setCurrencySymbol(renderer.getSymbol());
        format.setDecimalFormatSymbols(symbols);

        int decimal = (Integer) decimalSpinner.getValue();
        format.setMinimumFractionDigits(decimal);
        format.setMaximumFractionDigits(decimal);

        firePropertyChange(MODIFIED, false, true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        decimalLabel = new JLabel();
        decimalSpinner = new JSpinner();
        symbolLabel = new JLabel();
        symbolComboBox = new JComboBox();

        decimalLabel.setText(ResourceManager.getResourceMap(getClass()).getString("CurrencyConfigForm.decimalLabel.text")); // NOI18N
        decimalLabel.setName("decimalLabel"); // NOI18N

        decimalSpinner.setName("decimalSpinner"); // NOI18N
        decimalSpinner.setValue(2);
        decimalSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                decimalSpinnerStateChanged(evt);
            }
        });

        symbolLabel.setText(ResourceManager.getResourceMap(getClass()).getString("CurrencyConfigForm.symbolLabel.text")); // NOI18N
        symbolLabel.setName("symbolLabel"); // NOI18N

        symbolComboBox.setName("symbolComboBox"); // NOI18N
        symbolComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                symbolComboBoxItemStateChanged(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(symbolLabel)
                    .addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
                        .addComponent(symbolComboBox, Alignment.LEADING, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(decimalLabel)
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addComponent(decimalSpinner, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(decimalLabel)
                    .addComponent(decimalSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(symbolLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(symbolComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Called when the spinner value changes.
     *
     * @param evt an event.
     */
    private void decimalSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_decimalSpinnerStateChanged
        updateFormat();
    }//GEN-LAST:event_decimalSpinnerStateChanged

    /**
     * Called when the selection of the comboBox changes.
     *
     * @param evt an event.
     */
    private void symbolComboBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_symbolComboBoxItemStateChanged
        updateFormat();
    }//GEN-LAST:event_symbolComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel decimalLabel;
    private JSpinner decimalSpinner;
    private JComboBox symbolComboBox;
    private JLabel symbolLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * A renderer to use the Currency class in a JComboBox.
     *
     * @author Olivier Sechet
     * @version 1.0 - Apr 13, 2009
     */
    private static class CurrencyRenderer implements Comparable<CurrencyRenderer> {

        /** The wrapped currency's locale. */
        private final Locale locale;

        /** The wrapped currency. */
        private final Currency currency;

        /**
         * Creates a new CurrencyRenderer. The locale is needed to correctly render the
         * symbol, that's why the constructor only take a locale.
         *
         * @param locale the wrapped currency's locale.
         */
        public CurrencyRenderer(final Locale locale) {
            this.locale = locale;
            if (this.locale == null) {
                this.currency = null;
            } else {
                this.currency = DecimalFormatSymbols.getInstance(locale).getCurrency();
            }
        }

        /**
         * Returns the associated Locale.
         *
         * @return the associated Locale.
         */
        public Locale getLocale() {
            return locale;
        }

        /**
         * Returns the associated Currency.
         *
         * @return the associated Currency.
         */
        public Currency getCurrency() {
            return currency;
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public String toString() {
            if (locale == null) {
                return ResourceManager.getResourceMap(CurrencyConfigForm.class).getString("CurrencyConfigForm.noSymbol"); //$NON-NLS-1$
            }
            // The language and the country are displayed using the application's language
            return getSymbol() + " " + locale.getDisplayLanguage() + " (" + locale.getDisplayCountry() + ")"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        }

        /**
         * Returns the symbol associated with the currency.
         *
         * @return the symbol of the currency.
         */
        public String getSymbol() {
            if (locale == null) {
                return ""; //$NON-NLS-1$
            }
            return currency.getSymbol(locale);
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public int compareTo(final CurrencyRenderer that) {
            if (this.locale == null) {
                // When the locale is null, no symbol is used. This choice is always the first in the list.
                return -1;
            }
            if (this.currency.getCurrencyCode().equals(that.currency.getCurrencyCode())) {
                if (this.locale.getDisplayLanguage().equals(that.locale.getDisplayLanguage())) {
                    return this.locale.getDisplayCountry().compareTo(that.locale.getDisplayCountry());
                }
                return this.locale.getDisplayLanguage().compareTo(that.locale.getDisplayLanguage());
            }
            return this.currency.getCurrencyCode().compareTo(that.currency.getCurrencyCode());
        }
    }
}
